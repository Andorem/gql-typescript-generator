/* eslint-disable */
// This is autogenerated file, please DO NOT EDIT!!
//
//

import {ApolloClient} from "apollo-client";
import {NormalizedCacheObject} from "apollo-cache-inmemory";

import {
{{#each queries}}
{{toUpperCase name}}Query,
{{#if hasVariables}}{{toUpperCase name}}QueryVariables,{{/if}}
{{/each}}
{{#each mutations}}
{{toUpperCase name}}Mutation,
{{#if hasVariables}}{{toUpperCase name}}MutationVariables,{{/if}}
{{/each}}
} from "{{pathToTypes}}";

{{#each subscriptions}}
import {
{{name}},
{{#if hasVariables}}{{name}}Variables{{/if}}
} from "./{{name}}";
{{/each}}

{{#if mutations.length }}
    import * as mutations from "./mutations";
{{/if}}
{{#if queries.length}}
    import * as queries from "./queries";
{{/if}}
{{#if subscriptions.length}}
    import * as subscriptions from "./subscriptions";
{{/if}}

export const getOperations = (passedClient: ApolloClient<NormalizedCacheObject>) => ({
    mutations: {
    {{#each mutations}}
        {{name}}: async {{#if hasVariables}}(variables: {{toUpperCase name}}MutationVariables){{else}}(){{/if}} => {
        let result;
        const prepareError = new Error("");
        const splitLines = prepareError.stack.split("\n").slice(2);
        try {
        result = await passedClient.mutate<{{toUpperCase name}}Mutation{{#if hasVariables}}, {{toUpperCase name}}MutationVariables{{/if}}>({
                mutation: mutations.{{name}}{{#if hasVariables}},
                variables{{/if}}
            })
        } catch (e) {
        const smallStack = e.stack.split("\n");
        e.stack = [...smallStack, ...splitLines]
        .filter((l) => l.indexOf("node_modules") === -1)
        .join("\n");
        e.message = e.message.split("\n")[0];
        throw e;
        }
        return result.data.{{name}}
        },
    {{/each}}
    },
    queries: {
    {{#each queries}}
        {{name}}: async {{#if hasVariables}}(variables: {{toUpperCase name}}QueryVariables){{else}}(){{/if}} => {
        let result;
        const prepareError = new Error("");
        const splitLines = prepareError.stack.split("\n").slice(2);
        try {
        result = await passedClient.query<{{toUpperCase name}}Query{{#if hasVariables}}, {{toUpperCase name}}QueryVariables{{/if}}>({
                query: queries.{{name}}{{#if hasVariables}},
                variables{{/if}}
            })
        } catch (e) {
        const smallStack = e.stack.split("\n");
        e.stack = [...smallStack, ...splitLines]
        .filter((l) => l.indexOf("node_modules") === -1)
        .join("\n");
        e.message = e.message.split("\n")[0];
        throw e;
        }
        return result.data.{{name}}
        },
    {{/each}}
    },
    subscriptions: {
    {{#each subscriptions}}
        {{name}}: {{#if hasVariables}}(variables: {{toUpperCase name}}SubscriptionVariables){{else}}(){{/if}} =>
        passedClient.subscribe<{{name}}Subscription{{#if hasVariables}}, {{name}}SubscriptionVariables{{/if}}>({
        query: subscriptions.{{name}}{{#if hasVariables}},
        variables{{/if}}
        }),
    {{/each}}
    }
});
