import td from "testdouble";

{{#unless resolveReferenceType}}import { ResolversParentTypes, {{#if hasArguments}}{{typeName}}{{capitalizedFieldName}}Args{{/if}} } from "../../../../graphql/generated";{{/unless}}
import { {{typeName}}{{capitalizedFieldName}} } from "./{{typeName}}{{capitalizedFieldName}}";
import { GqlContext } from "../../../../context";

{{#if resolveReferenceType}}type ParentType = Parameters<typeof {{typeName}}{{capitalizedFieldName}}>[0];{{/if}}

    const test{{typeName}}{{capitalizedFieldName}} = (parent: {{#if resolveReferenceType}}ParentType{{else}}ResolversParentTypes["{{typeName}}"]{{/if}}, {{#if hasArguments}}variables: {{typeName}}{{capitalizedFieldName}}Args,{{/if}} context: GqlContext) => {{typeName}}{{capitalizedFieldName}}(parent, {{#unless resolveReferenceType}}{{#if hasArguments}}variables{{else}} {} {{/if}},{{/unless}} context, null)


test("{{typeName}}{{capitalizedFieldName}}", async () => {

const context = td.object<GqlContext>();

    // td.when(context.{{moduleName}}Repository.findOne()).thenResolve()

    {{#unless resolveReferenceType}}args,{{/unless}}
    const parent{{#if resolveReferenceType}} = {} as ParentType {{else}}: ResolversParentTypes["{{typeName}}"] = {}{{/if}}
    {{#if hasArguments}}
        const variables: {{typeName}}{{capitalizedFieldName}}Args = {}
    {{/if}}

    const result = await test{{typeName}}{{capitalizedFieldName}}(parent, {{#if hasArguments}}variables,{{/if}} context);

    });
